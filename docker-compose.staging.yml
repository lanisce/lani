version: '3.8'

services:
  web:
    image: ghcr.io/your-org/lani:staging
    restart: unless-stopped
    environment:
      - RAILS_ENV=staging
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@db:5432/lani_staging
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_TEST_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_TEST_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_TEST_WEBHOOK_SECRET}
      - MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}
      - OPENPROJECT_API_URL=${OPENPROJECT_STAGING_API_URL}
      - OPENPROJECT_API_KEY=${OPENPROJECT_STAGING_API_KEY}
      - MAYBE_API_URL=${MAYBE_STAGING_API_URL}
      - MAYBE_API_KEY=${MAYBE_STAGING_API_KEY}
      - NEXTCLOUD_URL=${NEXTCLOUD_STAGING_URL}
      - NEXTCLOUD_USERNAME=${NEXTCLOUD_STAGING_USERNAME}
      - NEXTCLOUD_PASSWORD=${NEXTCLOUD_STAGING_PASSWORD}
      - MEDUSA_API_URL=${MEDUSA_STAGING_API_URL}
      - MEDUSA_API_KEY=${MEDUSA_STAGING_API_KEY}
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_TO_STDOUT=true
    ports:
      - "3000:3000"
    depends_on:
      - db
      - redis
    volumes:
      - storage_data:/app/storage
      - public_uploads:/app/public/uploads
    networks:
      - lani_staging_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_DB=lani_staging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - lani_staging_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - lani_staging_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  sidekiq:
    image: ghcr.io/your-org/lani:staging
    restart: unless-stopped
    command: bundle exec sidekiq
    environment:
      - RAILS_ENV=staging
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@db:5432/lani_staging
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - storage_data:/app/storage
    networks:
      - lani_staging_network

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - public_uploads:/var/www/lani/uploads:ro
    depends_on:
      - web
    networks:
      - lani_staging_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  storage_data:
    driver: local
  public_uploads:
    driver: local

networks:
  lani_staging_network:
    driver: bridge
