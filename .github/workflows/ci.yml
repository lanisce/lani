name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  RUBY_VERSION: 3.1.4
  NODE_VERSION: 18
  RAILS_ENV: test
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/lani_test
  REDIS_URL: redis://localhost:6379/0

jobs:
  # Lint and code quality checks
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install Node.js dependencies
      run: yarn install --frozen-lockfile

    - name: Run RuboCop
      run: bundle exec rubocop --parallel

    - name: Run Brakeman security scan
      run: bundle exec brakeman --no-pager

    - name: Run bundle audit
      run: |
        bundle exec bundle audit --update
        bundle exec bundle audit

    - name: Run ESLint
      run: yarn run lint:js

    - name: Run Stylelint
      run: yarn run lint:css

  # Ruby/Rails tests
  test-ruby:
    name: Ruby Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lani_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install Node.js dependencies
      run: yarn install --frozen-lockfile

    - name: Setup test database
      run: |
        bundle exec rails db:create
        bundle exec rails db:schema:load

    - name: Precompile assets
      run: bundle exec rails assets:precompile

    - name: Run RSpec tests
      run: |
        bundle exec rspec \
          --format progress \
          --format RspecJunitFormatter \
          --out tmp/rspec_results.xml
      env:
        COVERAGE: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.xml
        flags: ruby
        name: ruby-tests

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: rspec-results
        path: tmp/rspec_results.xml

  # JavaScript/Frontend tests
  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run Vitest unit tests
      run: yarn run test:coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: javascript
        name: javascript-tests

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: vitest-results
        path: coverage/

  # End-to-end tests
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lani_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Setup test database
      run: |
        bundle exec rails db:create
        bundle exec rails db:schema:load
        bundle exec rails db:seed

    - name: Precompile assets
      run: bundle exec rails assets:precompile

    - name: Start Rails server
      run: |
        bundle exec rails server -p 3000 -e test &
        sleep 10
      env:
        RAILS_ENV: test

    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        install: false
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: true
        parallel: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Run Brakeman
      run: bundle exec brakeman --format json --output brakeman-results.json

    - name: Run bundle audit
      run: |
        bundle exec bundle audit --update
        bundle exec bundle audit --format json --output bundle-audit-results.json

    - name: Run npm audit
      run: yarn audit --json > npm-audit-results.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: |
          brakeman-results.json
          bundle-audit-results.json
          npm-audit-results.json

  # Build and test Docker image
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: lani:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm \
          -e RAILS_ENV=production \
          -e SECRET_KEY_BASE=test \
          -e DATABASE_URL=postgres://test:test@localhost/test \
          lani:test \
          bundle exec rails runner "puts 'Rails app loaded successfully'"

  # Performance and accessibility tests
  performance:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lani_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Setup test database
      run: |
        bundle exec rails db:create
        bundle exec rails db:schema:load
        bundle exec rails db:seed

    - name: Precompile assets
      run: bundle exec rails assets:precompile

    - name: Start Rails server
      run: |
        bundle exec rails server -p 3000 -e test &
        sleep 10
      env:
        RAILS_ENV: test

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-results
        path: .lighthouseci/

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [lint, test-ruby, test-javascript, test-e2e, security, docker, performance]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: ${{ needs.lint.result == 'success' && needs.test-ruby.result == 'success' && needs.test-javascript.result == 'success' && needs.test-e2e.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ All CI checks passed for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: ${{ needs.lint.result == 'failure' || needs.test-ruby.result == 'failure' || needs.test-javascript.result == 'failure' || needs.test-e2e.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ CI checks failed for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
