name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUBY_VERSION: 3.1.4
  NODE_VERSION: 18

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install Node.js dependencies
      run: yarn install --frozen-lockfile

    - name: Run bundle audit
      run: |
        bundle exec bundle audit --update
        bundle exec bundle audit --format json --output bundle-audit-results.json
      continue-on-error: true

    - name: Run npm audit
      run: |
        yarn audit --json > npm-audit-results.json || true
        yarn audit --level moderate
      continue-on-error: true

    - name: Run Snyk security scan
      uses: snyk/actions/ruby@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json-file-output=snyk-results.json
      continue-on-error: true

    - name: Upload vulnerability scan results
      uses: actions/upload-artifact@v3
      with:
        name: vulnerability-scan-results
        path: |
          bundle-audit-results.json
          npm-audit-results.json
          snyk-results.json

  # Static application security testing
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Run Brakeman security scan
      run: |
        bundle exec brakeman \
          --format json \
          --output brakeman-results.json \
          --exit-on-warn \
          --confidence-level 2
      continue-on-error: true

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/ruby
          p/javascript
        generateSarif: "1"
      continue-on-error: true

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()

    - name: Upload SAST results
      uses: actions/upload-artifact@v3
      with:
        name: sast-results
        path: |
          brakeman-results.json
          semgrep.sarif

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog secret scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks secret scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t lani:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'lani:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk container scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: lani:security-scan
        args: --file=Dockerfile --severity-threshold=medium
      continue-on-error: true

  # Infrastructure security scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov security scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif
      continue-on-error: true

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-results.sarif
      if: always()

    - name: Run Hadolint Dockerfile scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
      continue-on-error: true

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: hadolint-results.sarif
      if: always()

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install Node.js dependencies
      run: yarn install --frozen-lockfile

    - name: Run license compliance check (Ruby)
      run: |
        gem install license_finder
        license_finder --decisions-file=.license_finder.yml
      continue-on-error: true

    - name: Run license compliance check (Node.js)
      run: |
        npx license-checker --json > license-report.json
        npx license-checker --failOn 'GPL;AGPL;LGPL;CPAL;OSL;EPL;MPL'
      continue-on-error: true

    - name: Upload license scan results
      uses: actions/upload-artifact@v3
      with:
        name: license-scan-results
        path: |
          license-report.json
          doc/licenses.csv

  # Security report generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast, secret-scan, container-scan, infrastructure-scan, license-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security report
      run: |
        mkdir -p security-report
        
        echo "# Security Audit Report" > security-report/README.md
        echo "Generated on: $(date)" >> security-report/README.md
        echo "" >> security-report/README.md
        
        echo "## Vulnerability Scans" >> security-report/README.md
        if [ -f vulnerability-scan-results/bundle-audit-results.json ]; then
          echo "- Bundle Audit: $(jq '.results | length' vulnerability-scan-results/bundle-audit-results.json) vulnerabilities found" >> security-report/README.md
        fi
        
        if [ -f vulnerability-scan-results/npm-audit-results.json ]; then
          echo "- NPM Audit: $(jq '.metadata.vulnerabilities.total' vulnerability-scan-results/npm-audit-results.json) vulnerabilities found" >> security-report/README.md
        fi
        
        echo "" >> security-report/README.md
        echo "## Static Analysis" >> security-report/README.md
        if [ -f sast-results/brakeman-results.json ]; then
          echo "- Brakeman: $(jq '.warnings | length' sast-results/brakeman-results.json) warnings found" >> security-report/README.md
        fi
        
        echo "" >> security-report/README.md
        echo "## Container Security" >> security-report/README.md
        echo "- Trivy and Snyk container scans completed" >> security-report/README.md
        
        echo "" >> security-report/README.md
        echo "## Infrastructure Security" >> security-report/README.md
        echo "- Checkov and Hadolint scans completed" >> security-report/README.md
        
        echo "" >> security-report/README.md
        echo "## License Compliance" >> security-report/README.md
        echo "- License compliance checks completed" >> security-report/README.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report/

    - name: Create security issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Security Audit Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Security Audit Failure
          
          The automated security audit has detected issues that require attention.
          
          **Run Details:**
          - Workflow: ${context.workflow}
          - Run ID: ${context.runId}
          - Commit: ${context.sha}
          
          **Next Steps:**
          1. Review the security scan results in the workflow artifacts
          2. Address any high or critical severity issues
          3. Update dependencies and configurations as needed
          4. Re-run the security audit
          
          **Artifacts:**
          - Vulnerability scan results
          - Static analysis results
          - Container security scan results
          - Infrastructure security scan results
          - License compliance results
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'bug', 'high-priority']
          });

    - name: Notify security team
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '🚨 Security audit failed! Critical security issues detected.'
        channel: '#security'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

    - name: Notify on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Security audit completed successfully - no critical issues found.'
        channel: '#security'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
